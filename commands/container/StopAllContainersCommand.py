from colorama import Fore, Style
import subprocess
import asyncio
import time
import re
from ..command_registry import Command

class StopAllContainersCommand(Command):
    def __init__(self):
        super().__init__(["-d", "down"], "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—É")

    async def stop_all_containers(self):
        start_time = time.time()

        process = await asyncio.create_subprocess_exec(
            "docker", "ps", "-q", stdout=asyncio.subprocess.PIPE
        )
        stdout, _ = await process.communicate()
        container_ids = stdout.decode().strip().splitlines()

        if not container_ids:
            print(Fore.RED + "üö´ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return

        print(Fore.BLUE + "üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
        if container_ids:
            kill_process = await asyncio.create_subprocess_exec(
                "docker", "kill", *container_ids,
                stdout=asyncio.subprocess.DEVNULL,
                stderr=asyncio.subprocess.PIPE
            )
            _, stderr = await kill_process.communicate()

            if kill_process.returncode == 0:
                print(Fore.GREEN + f"‚úî –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            else:
                print(Fore.RED + f"‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {stderr.decode()}")

        total_time = time.time() - start_time
        print(f"\n‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")

    async def stop_filtered_containers(self, filter_option):
        start_time = time.time()

        process = await asyncio.create_subprocess_exec(
            "docker", "ps", "--format", "{{.ID}}\t{{.Names}}\t{{.Label \"com.docker.compose.project\"}}",
            stdout=asyncio.subprocess.PIPE
        )
        stdout, _ = await process.communicate()
        container_data = stdout.decode().strip().splitlines()

        matching_containers = [line for line in container_data if filter_option in line.split('\t')[2]]

        if not matching_containers:
            print(Fore.YELLOW + f"‚ö† –ü—Ä–æ–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π '{filter_option}', –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")

            process = await asyncio.create_subprocess_exec(
                "docker", "ps", "--filter", f"name={filter_option}", "--format", "{{.ID}}\t{{.Names}}",
                stdout=asyncio.subprocess.PIPE
            )
            stdout, _ = await process.communicate()
            matching_containers = stdout.decode().strip().splitlines()

            if not matching_containers:
                print(Fore.RED + f"üö´ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{filter_option}' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

        print(Fore.BLUE + f"üîç –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —á–∞—Å—Ç—å—é –∏–º–µ–Ω–∏/–ø—Ä–æ–µ–∫—Ç–∞ {Fore.YELLOW}{filter_option}{Fore.BLUE}:")
        if matching_containers:
            container_ids = [line.split('\t')[0] for line in matching_containers]
            kill_process = await asyncio.create_subprocess_exec(
                "docker", "kill", *container_ids,
                stdout=asyncio.subprocess.DEVNULL,
                stderr=asyncio.subprocess.PIPE
            )
            _, stderr = await kill_process.communicate()

            if kill_process.returncode == 0:
                print(Fore.GREEN + f"‚úî –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            else:
                print(Fore.RED + f"‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {stderr.decode()}")

        total_time = time.time() - start_time
        print(f"\n‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")

    def execute(self, *args):
        filter_option = args[0] if args else ""
        asyncio.run(self.execute_async(filter_option))

    async def execute_async(self, filter_option):
        if filter_option:
            await self.stop_filtered_containers(filter_option)
        else:
            await self.stop_all_containers()
