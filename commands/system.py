# commands/system.py
import os
import subprocess
import sys
import requests
import zipfile
import io
import shutil
from .command_registry import Command
from colorama import Fore, Style, init

init(autoreset=True)

class ChmodAllCommand(Command):
    def __init__(self):
        super().__init__(["-ch", "chmod"], "–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ 777 —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    def execute(self, *args):
        try:
            print(
                f"{Fore.YELLOW}{Style.BRIGHT}‚öô –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ...{Style.RESET_ALL}")
            subprocess.run(["sudo", "chmod", "777", "-R", "."], check=True)
            print(
                f"{Fore.GREEN}{Style.BRIGHT}‚úî –í—Å–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ 777.{Style.RESET_ALL}")
        except subprocess.CalledProcessError:
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.{Style.RESET_ALL}")


class GeneratePasswordHashCommand(Command):
    def __init__(self):
        super().__init__(["-gph", "generate-password-hash"], "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à –ø–∞—Ä–æ–ª—è")

    def execute(self, *args):
        if not args:
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞.{Style.RESET_ALL}")
            return

        password = args[0]
        hash_value = None
        tools = [("htpasswd", ["htpasswd", "-bnBC", "10", "", password]),
                 ("php", ["php", "-r", f"echo password_hash('{password}', PASSWORD_DEFAULT);"]),
                 ("openssl", ["openssl", "passwd", "-6", password])]

        for tool, command in tools:
            if subprocess.run(["which", tool], capture_output=True).returncode == 0:
                try:
                    result = subprocess.run(command, capture_output=True, text=True, check=True)
                    hash_value = result.stdout.strip().split(":")[1] if tool == "htpasswd" else result.stdout.strip()
                    break
                except subprocess.CalledProcessError:
                    continue

        if hash_value:
            print(
                f"{Fore.GREEN}{Style.BRIGHT}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à:{Style.RESET_ALL} {Fore.CYAN}{hash_value}{Style.RESET_ALL}")
        else:
            print(
                f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥—ã htpasswd, PHP –∏ OpenSSL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞.{Style.RESET_ALL}")

def change_ownership_with_sudo(repo_dir):
    try:
        subprocess.run(["sudo", "chmod", "777", "-R", repo_dir], check=True)
        print("‚úî –ü—Ä–∞–≤–∞ –Ω–∞ –ø–∞–ø–∫—É —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except subprocess.CalledProcessError as e:
        print(f"‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
        sys.exit(1)


class GetExternalIpCommand(Command):
    def __init__(self):
        super().__init__(["-eip", "external-ip"], "–í—ã–≤–æ–¥–∏—Ç IP –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞")

    def execute(self, *args):
        try:
            result = subprocess.run(["ifconfig"], capture_output=True, text=True)
            ip_lines = result.stdout.split('\n')
            external_ip = None

            for line in ip_lines:
                if 'inet ' in line and not line.strip().startswith('127.'):
                    external_ip = line.split()[1]
                    break

            if external_ip:
                print(
                    f"{Fore.GREEN}{Style.BRIGHT}üåç IP –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:{Style.RESET_ALL} {Fore.CYAN}{external_ip}{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}{Style.BRIGHT}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å.{Style.RESET_ALL}")

        except Exception as e:
            print(f"{Fore.RED}{Style.BRIGHT}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞: {str(e)}{Style.RESET_ALL}")


class GitIgnorePermissionsCommand(Command):
    def __init__(self):
        super().__init__(
            ["-gi", "git-ignore"],
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (chmod) –≤ Git [--help –¥–ª—è –æ–ø—Ü–∏–π]"
        )

    def execute(self, *args):
        if not os.path.isdir(".git"):
            print(f"{Fore.RED}‚úò –≠—Ç–æ –Ω–µ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–ø–∞–ø–∫–∞ .git –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).{Style.RESET_ALL}")
            return

        arg = args[0] if args else "--disable"

        if arg in ["-h", "--help", "help"]:
            self.print_help()
            return

        if arg == "--status":
            result = subprocess.run(["git", "config", "--get", "core.fileMode"], capture_output=True, text=True)
            value = result.stdout.strip()
            if value == "false":
                print(f"{Fore.GREEN}‚úî Git –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (core.fileMode=false).{Style.RESET_ALL}")
            else:
                print(f"{Fore.YELLOW}‚ö† Git –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (core.fileMode={value or 'true'}).{Style.RESET_ALL}")

        elif arg == "--enable":
            subprocess.run(["git", "config", "core.fileMode", "true"])
            print(f"{Fore.CYAN}‚ÑπÔ∏è Git —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (core.fileMode=true).{Style.RESET_ALL}")

        elif arg == "--disable":
            subprocess.run(["git", "config", "core.fileMode", "false"])
            print(f"{Fore.GREEN}‚úî Git –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å chmod-–∏–∑–º–µ–Ω–µ–Ω–∏—è (core.fileMode=false).{Style.RESET_ALL}")

        else:
            print(f"{Fore.RED}‚úò –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {arg}{Style.RESET_ALL}")
            self.print_help()

    def print_help(self):
        print(f"""{Fore.CYAN}
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: qq -gi [—Ñ–ª–∞–≥]

–§–ª–∞–≥–∏:
  --disable     –û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  --enable      –í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∞–≤
  --status      –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ core.fileMode
  -h, --help    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
{Style.RESET_ALL}""")

class SystemCommand:
    @staticmethod
    def register(registry):
        registry.register_command(GeneratePasswordHashCommand(), "system")
        registry.register_command(GetExternalIpCommand(), "system")
        registry.register_command(ChmodAllCommand(), "system")
        registry.register_command(GitIgnorePermissionsCommand(), "system")
