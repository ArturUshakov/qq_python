# commands/cleanup.py
import subprocess
from colorama import Fore, Style, init
from .command_registry import Command

init(autoreset=True)


class CleanupDockerImagesCommand(Command):
    def __init__(self):
        super().__init__(["-dni", "cleanup-docker-images"], "–£–¥–∞–ª—è–µ—Ç <none> images")

    def execute(self, *args):
        try:
            print(f"{Fore.YELLOW}–ü–æ–∏—Å–∫ <none> images...{Style.RESET_ALL}")
            result = subprocess.run(["docker", "images", "-f", "dangling=true", "-q"], capture_output=True, text=True)
            image_ids = result.stdout.strip().splitlines()

            if image_ids:
                print(f"{Fore.YELLOW}–ù–∞–π–¥–µ–Ω–æ {len(image_ids)} <none> images. –£–¥–∞–ª–µ–Ω–∏–µ...{Style.RESET_ALL}")
                try:
                    subprocess.run(["docker", "rmi"] + image_ids, check=True)
                    print(f"{Fore.GREEN}–í—Å–µ <none> images —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!{Style.RESET_ALL}")
                except subprocess.CalledProcessError as e:
                    print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ <none> images: {str(e)}{Style.RESET_ALL}")
                    force_remove = input(
                        f"{Fore.YELLOW}–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ images? (y/n): {Style.RESET_ALL}").lower()
                    if force_remove == 'y':
                        try:
                            subprocess.run(["docker", "rmi", "-f"] + image_ids, check=True)
                            print(f"{Fore.GREEN}–í—Å–µ <none> images —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ!{Style.RESET_ALL}")
                        except subprocess.CalledProcessError as e:
                            print(
                                f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ <none> images: {str(e)}{Style.RESET_ALL}")
                    else:
                        print(f"{Fore.YELLOW}–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.{Style.RESET_ALL}")
            else:
                print(f"{Fore.GREEN}–ù–µ—Ç <none> images –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.{Style.RESET_ALL}")

        except subprocess.CalledProcessError as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ <none> images: {str(e)}{Style.RESET_ALL}")


class PruneBuilderCommand(Command):
    def __init__(self):
        super().__init__(["-pb", "prune-builder"], "–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å–±–æ—Ä–∫–∏")

    def execute(self, *args):
        try:
            print(f"{Fore.YELLOW}–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–±–æ—Ä—â–∏–∫–∞...{Style.RESET_ALL}")
            result = subprocess.run(["docker", "builder", "prune", "-f"], check=True)
            if result.returncode == 0:
                print(f"{Fore.GREEN}–í—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–±–æ—Ä—â–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–±–æ—Ä—â–∏–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.{Style.RESET_ALL}")

        except subprocess.CalledProcessError as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–±–æ—Ä—â–∏–∫–∞: {str(e)}{Style.RESET_ALL}")


class ClearDockerCommand(Command):
    def __init__(self):
        super().__init__(
            ["-clr", "clear"],
            "–û—á–∏—Å—Ç–∫–∞ Docker: –æ–±—Ä–∞–∑—ã <none>, builder cache, —Ç–æ–º–∞ [--help –¥–ª—è –æ–ø—Ü–∏–π]"
        )

    def execute(self, *args):
        if "-h" in args or "--help" in args:
            self.print_help()
            return

        dry_run = "--dry-run" in args
        safe = "--safe" in args
        verbose = "--verbose" in args
        skip_confirm = "--yes" in args or "--force" in args

        if not dry_run and not skip_confirm:
            user_input = input(f"{Fore.YELLOW}‚ùì –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É Docker? (y/n): {Style.RESET_ALL}").strip().lower()
            if user_input != "y":
                print(f"{Fore.RED}‚úò –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Style.RESET_ALL}")
                return

        print(f"{Fore.CYAN}üìä –û–±—ä—ë–º Docker –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π:{Style.RESET_ALL}")
        subprocess.run(["docker", "system", "df"])

        self.cleanup_docker_images(dry_run, safe, verbose)
        self.prune_builder(dry_run, verbose)
        self.cleanup_volumes(dry_run, verbose)

        print(f"{Fore.CYAN}\nüìä –û–±—ä—ë–º Docker –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:{Style.RESET_ALL}")
        subprocess.run(["docker", "system", "df"])

    def cleanup_docker_images(self, dry_run=False, safe=False, verbose=False):
        print(f"{Fore.YELLOW}–ü–æ–∏—Å–∫ <none> images...{Style.RESET_ALL}")
        result = subprocess.run(["docker", "images", "-f", "dangling=true", "-q"], capture_output=True, text=True)
        image_ids = result.stdout.strip().splitlines()

        if not image_ids:
            print(f"{Fore.GREEN}‚úî –ù–µ—Ç dangling-–æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.{Style.RESET_ALL}")
            return

        if dry_run:
            print(f"{Fore.CYAN}[dry-run] –ù–∞—à–ª–æ—Å—å {len(image_ids)} –æ–±—Ä–∞–∑–æ–≤ <none> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:{Style.RESET_ALL}")
            for img in image_ids:
                print(f"  ‚Ä¢ {img}")
            return

        if safe:
            used_images = subprocess.run(["docker", "ps", "-a", "--format", "{{.Image}}"], capture_output=True, text=True).stdout.splitlines()
            safe_ids = [img for img in image_ids if img not in used_images]
        else:
            safe_ids = image_ids

        if not safe_ids:
            print(f"{Fore.YELLOW}‚ö† –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ <none> –æ–±—Ä–∞–∑—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è.{Style.RESET_ALL}")
            return

        try:
            subprocess.run(
                ["docker", "rmi"] + safe_ids,
                check=True,
                stdout=None if verbose else subprocess.DEVNULL,
                stderr=None if verbose else subprocess.DEVNULL
            )
            print(f"{Fore.GREEN}‚úî –£–¥–∞–ª–µ–Ω–æ {len(safe_ids)} <none> –æ–±—Ä–∞–∑–æ–≤.{Style.RESET_ALL}")
        except subprocess.CalledProcessError as e:
            print(f"{Fore.RED}‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤: {e}{Style.RESET_ALL}")

    def prune_builder(self, dry_run=False, verbose=False):
        print(f"{Fore.YELLOW}–û—á–∏—Å—Ç–∫–∞ builder cache...{Style.RESET_ALL}")
        if dry_run:
            print(f"{Fore.CYAN}[dry-run] –ë—ã–ª –±—ã –≤—ã–ø–æ–ª–Ω–µ–Ω: docker builder prune -f{Style.RESET_ALL}")
            return
        try:
            subprocess.run(
                ["docker", "builder", "prune", "-f"],
                check=True,
                stdout=None if verbose else subprocess.DEVNULL,
                stderr=None if verbose else subprocess.DEVNULL
            )
            print(f"{Fore.GREEN}‚úî –ö—ç—à –±–∏–ª–¥–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.{Style.RESET_ALL}")
        except subprocess.CalledProcessError as e:
            print(f"{Fore.RED}‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –±–∏–ª–¥–µ—Ä–∞: {e}{Style.RESET_ALL}")

    def cleanup_volumes(self, dry_run=False, verbose=False):
        print(f"{Fore.YELLOW}–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ–º–æ–≤...{Style.RESET_ALL}")
        if dry_run:
            print(f"{Fore.CYAN}[dry-run] –ë—ã–ª –±—ã –≤—ã–ø–æ–ª–Ω–µ–Ω: docker volume prune -f{Style.RESET_ALL}")
            return
        try:
            subprocess.run(
                ["docker", "volume", "prune", "-f"],
                check=True,
                stdout=None if verbose else subprocess.DEVNULL,
                stderr=None if verbose else subprocess.DEVNULL
            )
            print(f"{Fore.GREEN}‚úî –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–æ–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.{Style.RESET_ALL}")
        except subprocess.CalledProcessError as e:
            print(f"{Fore.RED}‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–º–æ–≤: {e}{Style.RESET_ALL}")

    def print_help(self):
        print(f"""{Fore.CYAN}
–û—á–∏—Å—Ç–∫–∞ Docker-—Ä–µ—Å—É—Ä—Å–æ–≤: —É–¥–∞–ª–µ–Ω–∏–µ dangling-–æ–±—Ä–∞–∑–æ–≤, builder-–∫—ç—à–∞ –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ–º–æ–≤.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  qq -clr [—Ñ–ª–∞–≥–∏]

–§–ª–∞–≥–∏:
  --dry-run     –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  --safe        –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
  --verbose     –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ Docker-–∫–æ–º–∞–Ω–¥
  --yes         –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)
  --force       –¢–æ –∂–µ, —á—Ç–æ –∏ --yes
  -h, --help    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:
  –ü—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
  –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º (--safe) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –æ–±—Ä–∞–∑—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö.
{Style.RESET_ALL}""")


class CleanupCommand:
    @staticmethod
    def register(registry):
        registry.register_command(CleanupDockerImagesCommand(), "cleanup")
        registry.register_command(PruneBuilderCommand(), "cleanup")
        registry.register_command(ClearDockerCommand(), "cleanup")
