# commands/system_commands.py
import os
import subprocess
import sys
import requests
import zipfile
import io
import shutil
from .command_registry import Command
from colorama import Fore, Style, init

init(autoreset=True)

class ChmodAllCommand(Command):
    def __init__(self):
        super().__init__("-ch", "–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ 777 —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    def execute(self, *args):
        try:
            print(
                f"{Fore.YELLOW}{Style.BRIGHT}‚öô –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ...{Style.RESET_ALL}")
            subprocess.run(["sudo", "chmod", "777", "-R", "."], check=True)
            print(
                f"{Fore.GREEN}{Style.BRIGHT}‚úî –í—Å–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ 777.{Style.RESET_ALL}")
        except subprocess.CalledProcessError:
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.{Style.RESET_ALL}")


class GeneratePasswordHashCommand(Command):
    def __init__(self):
        super().__init__(["-gph", "generate-password-hash"], "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à –ø–∞—Ä–æ–ª—è")

    def execute(self, *args):
        if not args:
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞.{Style.RESET_ALL}")
            return

        password = args[0]
        hash_value = None
        tools = [("htpasswd", ["htpasswd", "-bnBC", "10", "", password]),
                 ("php", ["php", "-r", f"echo password_hash('{password}', PASSWORD_DEFAULT);"]),
                 ("openssl", ["openssl", "passwd", "-6", password])]

        for tool, command in tools:
            if subprocess.run(["which", tool], capture_output=True).returncode == 0:
                try:
                    result = subprocess.run(command, capture_output=True, text=True, check=True)
                    hash_value = result.stdout.strip().split(":")[1] if tool == "htpasswd" else result.stdout.strip()
                    break
                except subprocess.CalledProcessError:
                    continue

        if hash_value:
            print(
                f"{Fore.GREEN}{Style.BRIGHT}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à:{Style.RESET_ALL} {Fore.CYAN}{hash_value}{Style.RESET_ALL}")
        else:
            print(
                f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥—ã htpasswd, PHP –∏ OpenSSL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞.{Style.RESET_ALL}")


class UpdateScriptCommand(Command):
    def __init__(self):
        super().__init__(["update", "upgrade"], "–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏")

    def execute(self, *args):
        home_dir = os.path.expanduser("~")
        repo_dir = os.path.join(home_dir, "qq")
        release_url = "https://api.github.com/repos/ArturUshakov/qq/releases/latest"

        if not os.path.exists(repo_dir):
            os.makedirs(repo_dir)

        try:
            print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ...")
            response = requests.get(release_url)
            response.raise_for_status()
            release_data = response.json()
            zip_url = release_data["zipball_url"]

            print("‚öô –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞...")
            zip_response = requests.get(zip_url)
            zip_response.raise_for_status()

            zip_path = os.path.join(repo_dir, "latest_release.zip")

            with open(zip_path, "wb") as f:
                f.write(zip_response.content)

            with zipfile.ZipFile(zip_path, "r") as z:
                z.extractall(repo_dir)

            print("üóë –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...")
            os.remove(zip_path)

            temp_dir = next(os.path.join(repo_dir, d) for d in os.listdir(repo_dir) if os.path.isdir(os.path.join(repo_dir, d)) and d.startswith("ArturUshakov-qq"))
            for file_name in os.listdir(temp_dir):
                shutil.move(os.path.join(temp_dir, file_name), repo_dir)

            shutil.rmtree(temp_dir)

            print("üóë –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            files_to_remove = [".github", "README.md", ".gitignore"]
            for file_name in files_to_remove:
                file_path = os.path.join(repo_dir, file_name)
                if os.path.isdir(file_path):
                    shutil.rmtree(file_path)
                elif os.path.isfile(file_path):
                    os.remove(file_path)

            print("–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –ø–∞–ø–∫—É...")
            shutil.chown(repo_dir, user=os.getenv("SUDO_USER", os.getenv("USER")), group=os.getenv("SUDO_USER", os.getenv("USER")))

            print("‚úî –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏!")
        except requests.exceptions.RequestException as e:
            print(f"‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
            sys.exit(1)
        except zipfile.BadZipFile:
            print("‚úò –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞.")
            sys.exit(1)


class GetExternalIpCommand(Command):
    def __init__(self):
        super().__init__(["-eip", "external-ip"], "–í—ã–≤–æ–¥–∏—Ç IP –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞")

    def execute(self, *args):
        try:
            result = subprocess.run(["ifconfig"], capture_output=True, text=True)
            ip_lines = result.stdout.split('\n')
            external_ip = None

            for line in ip_lines:
                if 'inet ' in line and not line.strip().startswith('127.'):
                    external_ip = line.split()[1]
                    break

            if external_ip:
                print(
                    f"{Fore.GREEN}{Style.BRIGHT}üåç IP –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:{Style.RESET_ALL} {Fore.CYAN}{external_ip}{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}{Style.BRIGHT}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å.{Style.RESET_ALL}")

        except Exception as e:
            print(f"{Fore.RED}{Style.BRIGHT}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞: {str(e)}{Style.RESET_ALL}")


class SystemCommand:
    @staticmethod
    def register(registry):
        registry.register_command(GeneratePasswordHashCommand(), "system")
        registry.register_command(GetExternalIpCommand(), "system")
        registry.register_command(ChmodAllCommand(), "system")
        registry.register_command(UpdateScriptCommand(), "system")
