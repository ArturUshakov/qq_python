# commands/system_commands.py
import os
import subprocess
import sys
from .command_registry import Command
from colorama import Fore, Style, init

init(autoreset=True)

class GitIgnoreFileModeCommand(Command):
    def __init__(self):
        super().__init__("-gi", "–û—Ç–∫–ª—é—á–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∞–≤ —Ñ–∞–π–ª–æ–≤ –≤ Git")

    def execute(self, *args):
        try:
            subprocess.run(["git", "config", "core.fileMode", "false"], check=True)
            print(f"{Fore.GREEN}{Style.BRIGHT}‚úî –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∞–≤ —Ñ–∞–π–ª–æ–≤ –≤ Git —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.{Style.RESET_ALL}")
        except subprocess.CalledProcessError:
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∞–≤ —Ñ–∞–π–ª–æ–≤ –≤ Git.{Style.RESET_ALL}")

class ChmodAllCommand(Command):
    def __init__(self):
        super().__init__("-ch", "–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ 777 —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    def execute(self, *args):
        try:
            print(f"{Fore.YELLOW}{Style.BRIGHT}‚öô –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ...{Style.RESET_ALL}")
            subprocess.run(["sudo", "chmod", "777", "-R", "."], check=True)
            print(f"{Fore.GREEN}{Style.BRIGHT}‚úî –í—Å–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ 777.{Style.RESET_ALL}")
        except subprocess.CalledProcessError:
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.{Style.RESET_ALL}")

class GeneratePasswordHashCommand(Command):
    def __init__(self):
        super().__init__(["-gph", "generate-password-hash"], "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à –ø–∞—Ä–æ–ª—è")

    def execute(self, *args):
        if not args:
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞.{Style.RESET_ALL}")
            return

        password = args[0]
        hash_value = None
        tools = [("htpasswd", ["htpasswd", "-bnBC", "10", "", password]),
                 ("php", ["php", "-r", f"echo password_hash('{password}', PASSWORD_DEFAULT);"]),
                 ("openssl", ["openssl", "passwd", "-6", password])]

        for tool, command in tools:
            if subprocess.run(["which", tool], capture_output=True).returncode == 0:
                try:
                    result = subprocess.run(command, capture_output=True, text=True, check=True)
                    hash_value = result.stdout.strip().split(":")[1] if tool == "htpasswd" else result.stdout.strip()
                    break
                except subprocess.CalledProcessError:
                    continue

        if hash_value:
            print(f"{Fore.GREEN}{Style.BRIGHT}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à:{Style.RESET_ALL} {Fore.CYAN}{hash_value}{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥—ã htpasswd, PHP –∏ OpenSSL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞.{Style.RESET_ALL}")

class UpdateScriptCommand(Command):
    def __init__(self):
        super().__init__(["update", "upgrade"], "–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏")

    def execute(self, *args):
        home_dir = os.path.expanduser("~")
        repo_dir = os.path.join(home_dir, "qq")

        if not os.path.exists(os.path.join(repo_dir, ".git")):
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ $HOME/qq –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.{Style.RESET_ALL}")
            sys.exit(1)

        try:
            os.chdir(repo_dir)

            print(f"{Fore.YELLOW}{Style.BRIGHT}‚öô –û—Ç–∫–∞—Ç –∫ —á–∏—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –≤–µ—Ç–∫–∏ master...{Style.RESET_ALL}")
            subprocess.run(["git", "checkout", "master"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            subprocess.run(["git", "reset", "--hard", "origin/master"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

            print(f"{Fore.YELLOW}{Style.BRIGHT}üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...{Style.RESET_ALL}")
            subprocess.run(["git", "pull", "origin", "master"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

            print(f"{Fore.GREEN}{Style.BRIGHT}‚úî –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ –≤ –≤–µ—Ç–∫–µ master!{Style.RESET_ALL}")
        except subprocess.CalledProcessError:
            print(f"{Fore.RED}{Style.BRIGHT}‚úò –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞.{Style.RESET_ALL}")
            sys.exit(1)

class GetExternalIpCommand(Command):
    def __init__(self):
        super().__init__(["-eip", "external-ip"], "–í—ã–≤–æ–¥–∏—Ç IP –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞")

    def execute(self, *args):
        try:
            result = subprocess.run(["ifconfig"], capture_output=True, text=True)
            ip_lines = result.stdout.split('\n')
            external_ip = None

            for line in ip_lines:
                if 'inet ' in line and not line.strip().startswith('127.'):
                    external_ip = line.split()[1]
                    break

            if external_ip:
                 print(f"{Fore.GREEN}{Style.BRIGHT}üåç IP –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:{Style.RESET_ALL} {Fore.CYAN}{external_ip}{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}{Style.BRIGHT}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å.{Style.RESET_ALL}")

        except Exception as e:
            print(f"{Fore.RED}{Style.BRIGHT}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞: {str(e)}{Style.RESET_ALL}")

class SystemCommand:
    @staticmethod
    def register(registry):
        registry.register_command(GeneratePasswordHashCommand(), "system")
        registry.register_command(GetExternalIpCommand(), "system")
        registry.register_command(GitIgnoreFileModeCommand(), "system")
        registry.register_command(ChmodAllCommand(), "system")
        registry.register_command(UpdateScriptCommand(), "system")
